sort1 uses: bubble sort

How do you know?:
It is expected to have performed the worst in the random data.
Minimal steps in the sorted due to no swaps. and when no swaps the function can break

sort2 uses: Merge Sort


How do you know?: In the random 5000 and 1000 as n increased the time proportionality was the lowest.
This is due to the order being of o(nlog(n)) where as the other 2 searched have O(n^2)

sort3 uses: selection sort

How do you know?: It took the longesst in the sorted groups because it has to compare pairs too each other continuing to iterate n-1 times.

